openapi: "3.1.0"
info:
  version: "0.1.0"
  title: Grafana k6 Extension Registry Service
  summary: Query the Grafana k6 Extension Registry database.
  description: |
    The **Grafana k6 Extension Registry Service** enables read-only access to the Grafana k6 Extension Registry database.

    The Grafana k6 Extension Registry database contains **up-to-date information about registered extensions**. The basic data of the extensions (e.g. go module path, JavaScript import path, description) are registered manually, the other data (e.g. available versions, number of stars) are retrieved automatically via the **repository manager API** (GitHub, GitLab, etc.).

    Detailed information about response schemas can be found in the [schema documentation](https://registry.k6.io/schema). Schemas are defined in [registry.schema.json](https://registry.k6.io/registry.schema.json)

    The source code of extensions is automatically **statically analyzed**. The result of the analysis is the **compliance level** of the best practices of Grafana k6 extensions (0-100%). Based on the compliance level, a **compliance grade** is also calculated (A-F). Based on the compliance grade, an SVG **compliance badge** is created for each extension. Example badge:

    ![xk6-sql](https://registry.k6.io/module/github.com/grafana/xk6-sql/badge.svg)

    The k6 Extension **Catalog** is an **alternative representation** of the k6 Extension **Registry**. Most queries have an alternative counterpart that returns a catalog instead of a registry.

    You can [try the k6 Extension Registry Service](https://registry.k6.io/ui)!

    Information about modifying the registry (register new extensions, modify or delete existing registrations) can be found in the [grafana/k6-extension-registry](https://github.com/grafana/k6-extension-registry) GitHub repository.
  termsOfService: https://grafana.com/legal/terms/
  license:
    name: AGPL-3.0-only
    url: https://www.gnu.org/licenses/agpl-3.0.html
externalDocs:
  description: Find out more about Grafana k6 extensions
  url: https://grafana.com/docs/k6/latest/extensions/
servers:
  - url: https://registry.k6.io
tags:
  - name: global
    description: Access to the entire registry
  - name: module
    description: Query a specific extension
  - name: catalog
    description: Extension catalog queries
  - name: subset
    description: Query subsets of the registry
paths:
  /registry.json:
    get:
      tags:
        - global
      summary: Entire registry
      description: Download the entire registry as a single JSON file
      operationId: entireRegistry
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/registry"
  /catalog.json:
    get:
      tags:
        - catalog
      summary: Entire catalog
      description: Download the entire catalog as a single JSON file
      operationId: entireCatalog
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/catalog"
  /module/{module}/extension.json:
    get:
      tags:
        - module
      summary: Query an extension
      description: Query the data of a specific extension as a single JSON file
      operationId: getExtension
      parameters:
        - $ref: "#/components/parameters/module"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/extension"
        "404":
          description: module not found
  /module/{module}/badge.svg:
    get:
      tags:
        - module
      summary: Download a badge
      description: |
        Download an extension's badge as an SVG image

        Example:

        ![xk6-sql](https://registry.k6.io/module/github.com/grafana/xk6-sql/badge.svg)
      operationId: getBadge
      parameters:
        - $ref: "#/components/parameters/module"
      produces:
        - image/svg+xml
      responses:
        "200":
          description: successful operation
        "404":
          description: module not found
  /product/{product}.json:
    get:
      tags:
        - subset
      summary: Suubset by product
      description: Querying the subset of the registry containing the extensions available in the product specified in the parameter
      operationId: subsetByProduct
      parameters:
        - $ref: "#/components/parameters/product"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/registry"
        "404":
          description: product not found
  /product/{product}-catalog.json:
    get:
      tags:
        - catalog
      summary: Catalog by product
      description: Query the catalog containing extensions available in a given product.
      operationId: catalogByProduct
      parameters:
        - $ref: "#/components/parameters/product"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/catalog"
        "404":
          description: product not found
  /tier/{tier}.json:
    get:
      tags:
        - subset
      summary: Subset by support
      description: Querying the subset of the registry containing the extensions with support specified in the parameter
      operationId: subsetByTier
      parameters:
        - $ref: "#/components/parameters/tier"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/registry"
        "404":
          description: tier not found
  /tier/{tier}-catalog.json:
    get:
      tags:
        - catalog
      summary: Catalog by support
      description: Query the catalog containing extensions available with a given support.
      operationId: catalogByTier
      parameters:
        - $ref: "#/components/parameters/tier"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/catalog"
        "404":
          description: tier not found
  /tier/at-least/{tier}.json:
    get:
      tags:
        - subset
      summary: Subset by min support
      description: Query the subset of the registry that contains the extensions whose support is at least the level specified as a parameter.
      operationId: subsetByMinTier
      parameters:
        - $ref: "#/components/parameters/tier"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/registry"
        "404":
          description: tier not found
  /tier/at-least/{tier}-catalog.json:
    get:
      tags:
        - catalog
      summary: Catalog by min support
      description: Query the catalog containing extensions available with at least the support specified as a parameter.
      operationId: catalogByMinTier
      parameters:
        - $ref: "#/components/parameters/tier"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/catalog"
        "404":
          description: tier not found
  /category/{category}.json:
    get:
      tags:
        - subset
      summary: Subset by category
      description: Querying the subset of the registry containing extensions belonging to the category specified in the parameter
      operationId: subsetByCategory
      parameters:
        - $ref: "#/components/parameters/category"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/registry"
        "404":
          description: category not found
  /grade/{grade}.json:
    get:
      tags:
        - subset
      summary: Subset by grade
      description: Querying the subset of the registry containing the extensions with the compliance grade specified in the parameter
      operationId: subsetByGrade
      parameters:
        - $ref: "#/components/parameters/grade"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/registry"
        "404":
          description: grade not found
  /grade/at-least/{grade}.json:
    get:
      tags:
        - subset
      summary: Subset by min grade
      description: Querying the subset of the registry containing extensions with at least compliance grade specified in the parameter
      operationId: subsetByMinGrade
      parameters:
        - $ref: "#/components/parameters/grade"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "registry.schema.json#/$defs/registry"
        "404":
          description: grade not found

components:
  parameters:
    module:
      in: path
      name: module
      required: true
      description: go module path of the extension
      examples:
        xk6-dashboard:
          value: "github.com/grafana/xk6-dashboard"
        xk6-sql:
          value: "github.com/grafana/xk6-sql"
      schema:
        type: string
    grade:
      in: path
      name: grade
      required: true
      description: grade to be queried
      examples:
        A:
          value: "A"
        C:
          value: "C"
      schema:
        $ref: "registry.schema.json#/$defs/grade"
    category:
      in: path
      name: category
      required: true
      description: category to be queried
      example: "data"
      schema:
        $ref: "registry.schema.json#/$defs/category"
    tier:
      in: path
      name: tier
      required: true
      description: tier to be queried
      examples:
        official:
          value: "official"
        community:
          value: "community"
      schema:
        $ref: "registry.schema.json#/$defs/tier"
    product:
      in: path
      name: product
      required: true
      description: product to be queried
      examples:
        oss:
          value: "oss"
        cloud:
          value: "cloud"
      schema:
        $ref: "registry.schema.json#/$defs/product"
